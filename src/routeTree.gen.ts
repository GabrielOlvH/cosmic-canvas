/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResearchRouteImport } from './routes/research'
import { Route as MindMapDemoRouteImport } from './routes/mind-map-demo'
import { Route as DemoCanvasRouteImport } from './routes/demo-canvas'
import { Route as CanvasRouteImport } from './routes/canvas'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'
import { Route as DemoDbChatApiRouteImport } from './routes/demo/db-chat-api'
import { Route as DemoDbChatRouteImport } from './routes/demo/db-chat'
import { Route as ApiSearchRouteImport } from './routes/api/search'
import { Route as ApiResearchCanvasRouteImport } from './routes/api/research-canvas'
import { Route as ApiIndexDocumentsRouteImport } from './routes/api/index-documents'
import { Route as ApiCanvasDataRouteImport } from './routes/api/canvas-data'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo/start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo/start.api-request'
import { Route as DemoFormSimpleRouteImport } from './routes/demo/form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo/form.address'
import { Route as DemoApiTqTodosRouteImport } from './routes/demo/api.tq-todos'
import { Route as DemoApiNamesRouteImport } from './routes/demo/api.names'
import { Route as DemoStartSsrIndexRouteImport } from './routes/demo/start.ssr.index'
import { Route as DemoStartSsrSpaModeRouteImport } from './routes/demo/start.ssr.spa-mode'
import { Route as DemoStartSsrFullSsrRouteImport } from './routes/demo/start.ssr.full-ssr'
import { Route as DemoStartSsrDataOnlyRouteImport } from './routes/demo/start.ssr.data-only'

const ResearchRoute = ResearchRouteImport.update({
  id: '/research',
  path: '/research',
  getParentRoute: () => rootRouteImport,
} as any)
const MindMapDemoRoute = MindMapDemoRouteImport.update({
  id: '/mind-map-demo',
  path: '/mind-map-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoCanvasRoute = DemoCanvasRouteImport.update({
  id: '/demo-canvas',
  path: '/demo-canvas',
  getParentRoute: () => rootRouteImport,
} as any)
const CanvasRoute = CanvasRouteImport.update({
  id: '/canvas',
  path: '/canvas',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoDbChatApiRoute = DemoDbChatApiRouteImport.update({
  id: '/demo/db-chat-api',
  path: '/demo/db-chat-api',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoDbChatRoute = DemoDbChatRouteImport.update({
  id: '/demo/db-chat',
  path: '/demo/db-chat',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSearchRoute = ApiSearchRouteImport.update({
  id: '/api/search',
  path: '/api/search',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiResearchCanvasRoute = ApiResearchCanvasRouteImport.update({
  id: '/api/research-canvas',
  path: '/api/research-canvas',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiIndexDocumentsRoute = ApiIndexDocumentsRouteImport.update({
  id: '/api/index-documents',
  path: '/api/index-documents',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiCanvasDataRoute = ApiCanvasDataRouteImport.update({
  id: '/api/canvas-data',
  path: '/api/canvas-data',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoApiTqTodosRoute = DemoApiTqTodosRouteImport.update({
  id: '/demo/api/tq-todos',
  path: '/demo/api/tq-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoApiNamesRoute = DemoApiNamesRouteImport.update({
  id: '/demo/api/names',
  path: '/demo/api/names',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrIndexRoute = DemoStartSsrIndexRouteImport.update({
  id: '/demo/start/ssr/',
  path: '/demo/start/ssr/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrSpaModeRoute = DemoStartSsrSpaModeRouteImport.update({
  id: '/demo/start/ssr/spa-mode',
  path: '/demo/start/ssr/spa-mode',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrFullSsrRoute = DemoStartSsrFullSsrRouteImport.update({
  id: '/demo/start/ssr/full-ssr',
  path: '/demo/start/ssr/full-ssr',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrDataOnlyRoute = DemoStartSsrDataOnlyRouteImport.update({
  id: '/demo/start/ssr/data-only',
  path: '/demo/start/ssr/data-only',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/canvas': typeof CanvasRoute
  '/demo-canvas': typeof DemoCanvasRoute
  '/mind-map-demo': typeof MindMapDemoRoute
  '/research': typeof ResearchRoute
  '/api/canvas-data': typeof ApiCanvasDataRoute
  '/api/index-documents': typeof ApiIndexDocumentsRoute
  '/api/research-canvas': typeof ApiResearchCanvasRoute
  '/api/search': typeof ApiSearchRoute
  '/demo/db-chat': typeof DemoDbChatRoute
  '/demo/db-chat-api': typeof DemoDbChatApiRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr': typeof DemoStartSsrIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/canvas': typeof CanvasRoute
  '/demo-canvas': typeof DemoCanvasRoute
  '/mind-map-demo': typeof MindMapDemoRoute
  '/research': typeof ResearchRoute
  '/api/canvas-data': typeof ApiCanvasDataRoute
  '/api/index-documents': typeof ApiIndexDocumentsRoute
  '/api/research-canvas': typeof ApiResearchCanvasRoute
  '/api/search': typeof ApiSearchRoute
  '/demo/db-chat': typeof DemoDbChatRoute
  '/demo/db-chat-api': typeof DemoDbChatApiRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr': typeof DemoStartSsrIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/canvas': typeof CanvasRoute
  '/demo-canvas': typeof DemoCanvasRoute
  '/mind-map-demo': typeof MindMapDemoRoute
  '/research': typeof ResearchRoute
  '/api/canvas-data': typeof ApiCanvasDataRoute
  '/api/index-documents': typeof ApiIndexDocumentsRoute
  '/api/research-canvas': typeof ApiResearchCanvasRoute
  '/api/search': typeof ApiSearchRoute
  '/demo/db-chat': typeof DemoDbChatRoute
  '/demo/db-chat-api': typeof DemoDbChatApiRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr/': typeof DemoStartSsrIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/canvas'
    | '/demo-canvas'
    | '/mind-map-demo'
    | '/research'
    | '/api/canvas-data'
    | '/api/index-documents'
    | '/api/research-canvas'
    | '/api/search'
    | '/demo/db-chat'
    | '/demo/db-chat-api'
    | '/demo/tanstack-query'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/canvas'
    | '/demo-canvas'
    | '/mind-map-demo'
    | '/research'
    | '/api/canvas-data'
    | '/api/index-documents'
    | '/api/research-canvas'
    | '/api/search'
    | '/demo/db-chat'
    | '/demo/db-chat-api'
    | '/demo/tanstack-query'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr'
  id:
    | '__root__'
    | '/'
    | '/canvas'
    | '/demo-canvas'
    | '/mind-map-demo'
    | '/research'
    | '/api/canvas-data'
    | '/api/index-documents'
    | '/api/research-canvas'
    | '/api/search'
    | '/demo/db-chat'
    | '/demo/db-chat-api'
    | '/demo/tanstack-query'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CanvasRoute: typeof CanvasRoute
  DemoCanvasRoute: typeof DemoCanvasRoute
  MindMapDemoRoute: typeof MindMapDemoRoute
  ResearchRoute: typeof ResearchRoute
  ApiCanvasDataRoute: typeof ApiCanvasDataRoute
  ApiIndexDocumentsRoute: typeof ApiIndexDocumentsRoute
  ApiResearchCanvasRoute: typeof ApiResearchCanvasRoute
  ApiSearchRoute: typeof ApiSearchRoute
  DemoDbChatRoute: typeof DemoDbChatRoute
  DemoDbChatApiRoute: typeof DemoDbChatApiRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoApiNamesRoute: typeof DemoApiNamesRoute
  DemoApiTqTodosRoute: typeof DemoApiTqTodosRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
  DemoStartSsrDataOnlyRoute: typeof DemoStartSsrDataOnlyRoute
  DemoStartSsrFullSsrRoute: typeof DemoStartSsrFullSsrRoute
  DemoStartSsrSpaModeRoute: typeof DemoStartSsrSpaModeRoute
  DemoStartSsrIndexRoute: typeof DemoStartSsrIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/research': {
      id: '/research'
      path: '/research'
      fullPath: '/research'
      preLoaderRoute: typeof ResearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mind-map-demo': {
      id: '/mind-map-demo'
      path: '/mind-map-demo'
      fullPath: '/mind-map-demo'
      preLoaderRoute: typeof MindMapDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo-canvas': {
      id: '/demo-canvas'
      path: '/demo-canvas'
      fullPath: '/demo-canvas'
      preLoaderRoute: typeof DemoCanvasRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/canvas': {
      id: '/canvas'
      path: '/canvas'
      fullPath: '/canvas'
      preLoaderRoute: typeof CanvasRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/db-chat-api': {
      id: '/demo/db-chat-api'
      path: '/demo/db-chat-api'
      fullPath: '/demo/db-chat-api'
      preLoaderRoute: typeof DemoDbChatApiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/db-chat': {
      id: '/demo/db-chat'
      path: '/demo/db-chat'
      fullPath: '/demo/db-chat'
      preLoaderRoute: typeof DemoDbChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/search': {
      id: '/api/search'
      path: '/api/search'
      fullPath: '/api/search'
      preLoaderRoute: typeof ApiSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/research-canvas': {
      id: '/api/research-canvas'
      path: '/api/research-canvas'
      fullPath: '/api/research-canvas'
      preLoaderRoute: typeof ApiResearchCanvasRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/index-documents': {
      id: '/api/index-documents'
      path: '/api/index-documents'
      fullPath: '/api/index-documents'
      preLoaderRoute: typeof ApiIndexDocumentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/canvas-data': {
      id: '/api/canvas-data'
      path: '/api/canvas-data'
      fullPath: '/api/canvas-data'
      preLoaderRoute: typeof ApiCanvasDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/api/tq-todos': {
      id: '/demo/api/tq-todos'
      path: '/demo/api/tq-todos'
      fullPath: '/demo/api/tq-todos'
      preLoaderRoute: typeof DemoApiTqTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/api/names': {
      id: '/demo/api/names'
      path: '/demo/api/names'
      fullPath: '/demo/api/names'
      preLoaderRoute: typeof DemoApiNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/': {
      id: '/demo/start/ssr/'
      path: '/demo/start/ssr'
      fullPath: '/demo/start/ssr'
      preLoaderRoute: typeof DemoStartSsrIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/spa-mode': {
      id: '/demo/start/ssr/spa-mode'
      path: '/demo/start/ssr/spa-mode'
      fullPath: '/demo/start/ssr/spa-mode'
      preLoaderRoute: typeof DemoStartSsrSpaModeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/full-ssr': {
      id: '/demo/start/ssr/full-ssr'
      path: '/demo/start/ssr/full-ssr'
      fullPath: '/demo/start/ssr/full-ssr'
      preLoaderRoute: typeof DemoStartSsrFullSsrRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/data-only': {
      id: '/demo/start/ssr/data-only'
      path: '/demo/start/ssr/data-only'
      fullPath: '/demo/start/ssr/data-only'
      preLoaderRoute: typeof DemoStartSsrDataOnlyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CanvasRoute: CanvasRoute,
  DemoCanvasRoute: DemoCanvasRoute,
  MindMapDemoRoute: MindMapDemoRoute,
  ResearchRoute: ResearchRoute,
  ApiCanvasDataRoute: ApiCanvasDataRoute,
  ApiIndexDocumentsRoute: ApiIndexDocumentsRoute,
  ApiResearchCanvasRoute: ApiResearchCanvasRoute,
  ApiSearchRoute: ApiSearchRoute,
  DemoDbChatRoute: DemoDbChatRoute,
  DemoDbChatApiRoute: DemoDbChatApiRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoApiNamesRoute: DemoApiNamesRoute,
  DemoApiTqTodosRoute: DemoApiTqTodosRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
  DemoStartSsrDataOnlyRoute: DemoStartSsrDataOnlyRoute,
  DemoStartSsrFullSsrRoute: DemoStartSsrFullSsrRoute,
  DemoStartSsrSpaModeRoute: DemoStartSsrSpaModeRoute,
  DemoStartSsrIndexRoute: DemoStartSsrIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
